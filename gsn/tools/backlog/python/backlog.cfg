###########################################################
#
# OPTIONS
#
# BackLog specific parameters have to be set here.
#
###########################################################
[options]

# The device id specifies the id the CoreStation is
# using. It operates as a unique specifier per deployment.
# Thus, it must have a unique number. If the CoreStation
# is equipped with an Access Node, the Access Node and the
# CoreStation must have the same id (device_id = node_id)

device_id = 0

# The TCP port BackLog is listening for incoming GSN
# connection requests.

gsn_port = 9003

# 0 if normal operating mode should be used. The Core-
# Station will be powered constantly.
# 1 if the CoreStation should be operated in the duty-cycle
# mode. In this case a TinyNode with a power control image
# has to be equipped.

duty_cycle_mode = 0

# The sqlite3 database file name which will be used to
# backlog data sent to GSN.

backlog_db = /media/card/backlog/backlog.db

# Interval in hours after which all data in the backlog
# database will be resent to GSN.

backlog_db_resend_hr = 24

# A folder to be checked if at least folder_min_free_mb
# are left. This is used to check if the sd-card is mounted
# properly. If less space is available BackLog will exit at
# startup with an error message.

folder_to_check_size = /media/card/
folder_min_free_mb = 32

# The serial TOS source address BackLog can communicate
# with a TinyNode running TinyOS version one or two.
# These parameters are only needed if BackLog runs a
# plugin using the TOSPeer module.

tos_source_addr = serial@/dev/ttyS2:57600
tos_version = 2

# The I2C device and address (hex) over which BackLog can
# communicate with a DPP board running LWB/Glossy.
# These parameters are only needed if BackLog runs a
# plugin using the DPPPeer module.

dpp_i2c_device = 0x00
dpp_i2c_address = 0x48
dpp_i2c_polling_interval_sec = 5

# Specifies the EXT port on which the WLAN (MikroTik is
# connected to.
#wlan_port = 2

# The daytime in UTC and number of minutes the service
# wake-up should take place. The wlan of the CoreStation
# will be turned on every day at this time for the specified
# number of minutes. If the CoreStation is in duty-cycle
# mode, the CoreStation will also be waked-up from deep
# sleep (if service_wakeup_disable is not set, see in
# schedule section further down).

service_wakeup_schedule = 10:00
service_wakeup_minutes = 30

# Should the wlan be duty-cycled if backlog is resending
# data from the BackLog database. Defaults to false

wlan_duty_cycle_while_resending = false

# This file is used to store shutdown informations.
shutdown_check_file = /media/card/backlog/.backlog_shutdown

# This file is used to store a hash of this configuration
# file.
config_hash_file = /media/card/backlog/.backlog_config_hash

# DEPRECATED for new images. Has to be set to 2 for
# BaseBoardv2 r2.0 or 1 for BaseBoardv2 r1.0.
#platform = 2



###########################################################
#
# SCHEDULE
#
# Schedule specific parameters have to be set here.
#
###########################################################
[schedule]

# The schedule file name which will be used to store the
# actual schedule. Their will be a second file generated
# ending with .parsed containing the pickled schedule
# object.

schedule_file = /media/card/backlog/schedule_file

# The maximum number of minutes BackLog will be waiting for
# GSN to connect at startup. After this time has passed
# BackLog will be using the locally stored schedule file.

max_gsn_connect_wait_minutes = 2

# The maximum number of minutes BackLog will be waiting for
# GSN to answer on a new schedule request at startup. After
# this time has passed BackLog will be using the locally
# stored schedule file. 

max_gsn_get_schedule_wait_minutes = 1

# The maximum number of minutes BackLog will wait without
# duty-cycling for the next schedule. This parameter is
# only of importance in duty-cycle mode.

max_next_schedule_wait_minutes = 5

# An approximation for a normal CoreStation startup in
# seconds. This is needed to wake-up the CoreStation
# little bit prior to the next schedule time after a
# duty-cycle. Thus, BackLog is up and running when the
# task should be scheduled.

approximate_startup_seconds = 120

# After BackLog has finished all its tasks it finally
# shuts down the CoreStation. If anything goes wrong on
# shutdown this parameter defines after how many minutes
# the power to the CoreStation should be cut in any case.

hard_shutdown_offset_minutes = 2

# The maximum number of minutes after startup BackLog will
# be allowed to resend  data stored in the backlog database
# to GSN before it will shutdown. This parameter is only of
# importance in duty-cycle mode.

max_db_resend_runtime = 15

# If service_wakeup_disable is set to 1 the service wake-up
# will be disabled (if the tinynode is not connected for
# more than half the service window interval time, the
# service wake-up is done even if disabled). This only
# holds for duty-cycled CoreStations and will not influence
# the wlan service window behavior.

service_wakeup_disable = 0



###########################################################
#
# Power Monitor
#
###########################################################
[powermonitor]

# Update interval in seconds. If not set the power monitor
# is disabled. In a normal setup choose update_interval = 30.

#update_interval = 30

# The number of datapoints which are used for the
# calculations. Consider this number together with the
# update_interval, so that at least 2h are covered!

# history_size = 300

# The number of samples of the voltage and current sensor
# are taken! 5 is good! update_interval >> samples!

#samples = 5

# The length of the power cable from the battery to the
# coreStation in meter:

#cable_length =

# Define the resistance of the voltage controller in mOHM.
# If you are using the SunSaver, this value is 150 (mOHM)
# If you are using the Pro device, the resistance is 300
# (mOHM, this is just estimated, better you measure it in
# advance!)

#voltage_controller_resistance = 150

# The number of batteries which are attached in parallel
# and the sum of their capacities in terms of Ah:

#battery_number =
#battery_capacity = 

# For multiple consumers, if the additional load current is 
# known, improve model accuracy by supplying here. To be
# given in mA
 
# extraLoadCurrent = 0



###########################################################
#
# PLUGINS
#
# Plugin specific parameters have to be set here.
#
# A plugin will be started at BackLog startup time if set
# to 1. If set to 0 the plugin can still be loaded by the
# scheduler dynamically at runtime.
# Each plugin can define its own parameter subsection
# [PluginName_options] in which plugin specific parameters
# can be defined.
#
# Each pluging can define at least the following three
# parameters (if not defined the default will be used):
#
# priority:     It can be set to values between 1 and 100.
#               It specifies the order (1 first, 100 last)
#               messages are sent to GSN. (default=99 if not
#               otherwise specified in the plugin)
#
# backlog:      If set to true, messages will be backlogged
#               in the sqlite3 backlog database and only be
#               removed from it if GSN has savely stored the
#               data in its SQL database.
#               If set to false, messages are not backlogged.
#               (default=true if not otherwise specified in
#               the plugin)
#
# max_runtime:  Specifies the time in minutes the plugin is
#               maximally allowed to run. If it is still
#               busy after this time BackLog will stop it.
#               If this parameter is not set the plugin
#               is allowed to run indefinitely.
#               This value can be overwritten by the
#               'max_runtime_minutes' parameter defined in
#               the schedule file.
#               (default=unlimited runtime)
#
# min_runtime:  Specifies the time in minutes the plugin will
#               minimally run. Even if the plugin is not busy
#               it will be kept alive for this time. If this
#               parameter is not set or equals 0 the plugin
#               will be stopped as soon as it is not busy
#               anymore.
#               This value can be overwritten by the
#               'min_runtime_minutes' parameter defined in
#               the schedule file.
#               (default=0)
#
# runtime_mode: Specifies the mode the plugin will be running
#               in. The mode defines the stopping behavior of
#               the plugin and may influence the shutdown
#               behavior of the CoreStation if in duty-cycle
#               mode. It can be set to the following three
#               modes:
#
#               1 - The plugin will be stopped as soon as
#                   min_runtime is over and it is not busy
#                   anymore.
#               2 - The plugin will only be stopped (and thus
#                   be observed) if BackLog is duty-cycling.
#                   If duty-cycling the plugin behaves like in
#                   mode 1.
#               3 - It will be stopped as soon as all other
#                   jobs (plugins and scripts) are finish or
#                   min_runtime is over (which ever occurs
#                   first) and it is not busy anymore.
#               4 - The plugin will only be stopped (and thus
#                   be observed) if BackLog is duty-cycling.
#                   If duty-cycling the plugin behaves like in
#                   mode 3.
#               5 - In mode 5, once started the plugin will
#                   only be stopped on shutdown or on manual
#                   stop of BackLog. The plugins runtime will
#                   not be observed and thus it will not
#                   influence the stopping behavior in duty-
#                   cycle mode.
#
#               If max_runtime is set, it will be valid for all
#               five modes and the plugin will be observed and
#               thus influence the shutdown behavior of the
#               CoreStation.
#
#               All modes will also be valid for scheduled
#               plugins.
#               (default=5)
#
###########################################################
[plugins]

# Operates as a bidirectional repeater for TOS messages.
# The CoreStation has to be equipped with an access node.
# All messages will be backlogged by default.

TOSPlugin = 0
TOS1xPlugin = 0

# Operates as a bidirectional repeater for LWB messages.
# The CoreStation has to be equipped with a DPP board.
# All messages will be backlogged by default.

DPPPlugin = 0

# Collects BackLog specific status informations and
# transmits them to GSN.

BackLogStatusPlugin = 0

# Collects CoreStation specific status informations and
# transmits them to GSN.

CoreStationStatusPlugin = 0

# Controls the CamZilla robot

CamZillaPlugin = 0

# Listens for incoming log messages from syslog-ng and
# forwards them to GSN.

SyslogNgPlugin = 0

# Observes specific folders for new incoming files and
# transmits them savely to GSN. Interrupted transmissions
# will be resumed as soon as the connection is re-
# established.

BinaryPlugin = 0

# Reads Vaisala weather station data and transmits it to
# GSN.

VaisalaWXT520Plugin = 0

# Read GPS data and transmit it to GSN.
GPSPlugin = 0

# 6712 sampler plugin
Sampler6712Plugin = 0

[TOSPlugin_options]
priority = 10
backlog = true


[TOS1xPlugin_options]
priority = 10
backlog = true


[DPPPlugin_options]
priority = 10
backlog = true


[BackLogStatusPlugin_options]
priority = 20
backlog = true

# The interval in seconds after which the BackLogStatus-
# Plugin will send a new status message to GSN. Instead
# of using or combined with this functionality schedules
# can be used to generate these messages.

#poll_interval = 30


[CoreStationStatusPlugin_options]
priority = 20
backlog = true

# The interval in seconds after which the CoreStation-
# StatusPlugin will send a new CoreStation status message
# to GSN. Instead of using or combined with this
# functionality schedules can be used to generate these
# messages.

#poll_interval = 30

[GPSPlugin_options]                                   
# See SVN: doc/wireless_gps/GPSPlugin for documentation!!
# Backlog specific parameters.

priority = 20
backlog = true

# Specifies the GPS receiver source address.

gps_device = /dev/acm/ublox6

# File that contains the GPS receiver configuration.
# Must be produced by u-center (don't forget to add
# cfg-cfg message at the very end as it is not generated by u-center)
# CFG-CFG - 06 09 0D 00 00 00 00 00 FF FF 00 00 00 00 00 00 07

gps_config_file = /media/card/backlog/LEA_6T_703.txt

# (Optional) The interval of GPS sampling in seconds. If this is not
# provided, the default in the config file is used, else, the default
# (30 seconds) is overwritten with this value. More than 60 sec and less
# than 5 seconds are NOT recommended.

poll_interval = 30

# File that stores the sample count past power cycles.

cnt_file = /media/card/backlog/GPS_cnt.txt


[CamZillaPlugin_options]
priority = 20
backlog = true
runtime_mode = 4

# Keep at least this amount of Mb free on partition where
# 'picture_folder' is situated. If the limit is reached, the
# oldest pictures in 'picture_folder' get deleted. The same
# minimum limit holds for 'webcam_picture_folder'.
keep_min_mb_free = 50

# Set to 1 if the primary DSLR camera is available.
dslr_available = 1

# Set to 1 if changing the focus should be allowed.
focus = 1

# The folder where the taken pictures should be stored in.
picture_folder = /media/card/backlog/binaryplugin/camera1/

# EXT port number the DSLR is attached to
ext_port_dslr = 1

# USB port number the DSLR is attched to
usb_port_dslr = 3

# EXT port number the heater/fan is attached to
ext_port_heater = 3

# Set to 1 if the secondary webcam is available.
webcam_available = 0

# The http address to download an image from a secondary
# webcam.
# E.g. http://USER:PASSWORD@permasense-etz-cam01/record/current.jpg
webcam_http = 

# The folder where the taken pictures from the webcam should
# be stored in.
webcam_picture_folder = /media/card/backlog/binaryplugin/webcam1/

# Set to 1 if the camera is attached to a robot.
robot_available = 0

# All the following options are only used if a robot is
# available.

# EXT port number the robot is attached to
ext_port_robot = 1

# USB port number the robot is attched to
usb_port_robot = 2

# Set to 1 if power save mode should be turned on.
# This mode turns off the power supply to the camera and robot
# after each picture task. Thus the robot recalibration has to
# be done for each task. If turned off the camera and robot are
# always turned on (if not turned off manually).
power_save_mode = 1


# The number of encoder pulses generated for one degree robot
# rotation.
pulses_per_degree = 26.5

# The position (x/y) the robot should move to when it is not
# used for a while.
park_position = 0/-30

# The idle time in minutes to wait after a task execution
# till the robot will be moved into its parking position.
park_robot_idle_time = 15

# The serial source address to communicate
# with the CamZilla robot.
device_name = /dev/ttyACM0


[SyslogNgPlugin_options]
priority = 80
backlog = true

# The unix socket BackLog is listening for syslog-ng connections
# and incoming log messages.

log_socket = /var/run/backlog_log_socket


[BinaryPlugin_options]
priority = 50
backlog = false
runtime_mode = 4
min_runtime = 3

# The root directory in which the observed subfolders
# will be created. If no watches are defined this folder
# will be watched directly.

rootdir = /media/card/backlog/binaryplugin

# Defines the different subfolders which should be
# observed for new files to be transmitted to GSN. The first
# entry defines the relative folder to be watched. The second
# entry where the data should be stored on the side of
# GSN (database or filesystem). The third entry defines optionally
# a device id can be set, if binaries are coming from a different
# device. The fourth entry defines only if filesystem is used for
# storage, how the files should be separated related to their
# generation time.
# e.g. watch1 = webcam1,filesystem,1234,yyyy-MM

watch1 = webcam1,filesystem,,
watch2 = camera1,filesystem,,yyyy-MM-dd

# Wait the specified number of seconds for a sent binary chunk
# to be acknowledged before resending it.
chunk_resend_timeout = 30


[VaisalaWXT520Plugin_options]
priority = 20
backlog = true

# The interval in seconds after which the VaisalaWXT520-
# Plugin will send a new vaisala message to GSN. Instead
# of using or combined with this functionality schedules
# can be used to generate these messages.

#poll_interval = 60


[Sampler6712Plugin_options]
priority = 10
backlog = True
runtime_mode = 4
# Wait at least the specified number of minutes after
# plugin startup before allowing BackLog to stop the
# Sampler6712Plugin.
min_runtime = 2

device_name = /tmp/myttyUSB0
#device_name = /dev/ttyUSB0
baudrate = 19200

# File name where to store bottle status
bottle_status_file = /media/card/backlog/bottle_status



###########################################################
#
# LOGGING
#
# Logging specific parameters have to be set in the
# following sections.
#
# For further information please refer to
# http://docs.python.org/library/logging.html
#
###########################################################
[loggers]
keys = root

[handlers]
keys = stdout,syslog

[formatters]
keys = datetimeLevelclass,syslogLevelclass

[logger_root]
level=NOTSET
handlers=stdout,syslog

[handler_stdout]
class=StreamHandler
level=INFO
formatter=datetimeLevelclass
args=(sys.stdout,)

[handler_syslog]
class=SyslogNgPlugin.SyslogNgHandler
level=INFO
formatter=syslogLevelclass
args=('/dev/log',)

[formatter_datetimeLevelclass]
format=%(levelname)-7s [%(asctime)s,%(msecs)3.3d] [%(threadName)s] (%(filename)s:%(lineno)d) %(name)s     - %(message)s
datefmt=%Z %d/%m/%Y %H:%M:%S
class=logging.Formatter

[formatter_syslogLevelclass]
format=backlog: %(levelname)-7s [%(asctime)s,%(msecs)3.3d] [%(threadName)s] (%(filename)s:%(lineno)d) %(name)s     - %(message)s
datefmt=%Z %d/%m/%Y %H:%M:%S
class=logging.Formatter
