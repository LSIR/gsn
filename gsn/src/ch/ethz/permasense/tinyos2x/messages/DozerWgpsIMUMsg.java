/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DozerWgpsIMUMsg'
 * message type.
 */

package ch.ethz.permasense.tinyos2x.messages;

public class DozerWgpsIMUMsg extends ch.ethz.permasense.tinyos2x.messages.DataHeaderMsg {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 30;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 212;

    /** Create a new DozerWgpsIMUMsg of size 30. */
    public DozerWgpsIMUMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DozerWgpsIMUMsg of the given data_length. */
    public DozerWgpsIMUMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg with the given data_length
     * and base offset.
     */
    public DozerWgpsIMUMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg using the given byte array
     * as backing store.
     */
    public DozerWgpsIMUMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DozerWgpsIMUMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DozerWgpsIMUMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg embedded in the given message
     * at the given base offset.
     */
    public DozerWgpsIMUMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DozerWgpsIMUMsg embedded in the given message
     * at the given base offset and length.
     */
    public DozerWgpsIMUMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DozerWgpsIMUMsg> \n";
      try {
        s += "  [header.seqNr=0x"+Long.toHexString(get_header_seqNr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.originatorID=0x"+Long.toHexString(get_header_originatorID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.low=0x"+Long.toHexString(get_header_aTime_low())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.aTime.high=0x"+Long.toHexString(get_header_aTime_high())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.acc_x=0x"+Long.toHexString(get_payload_acc_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.acc_y=0x"+Long.toHexString(get_payload_acc_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.acc_z=0x"+Long.toHexString(get_payload_acc_z())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mag_x=0x"+Long.toHexString(get_payload_mag_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mag_y=0x"+Long.toHexString(get_payload_mag_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.mag_z=0x"+Long.toHexString(get_payload_mag_z())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.wgps_status_queue=0x"+Long.toHexString(get_payload_wgps_status_queue())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.app_health_queue=0x"+Long.toHexString(get_payload_app_health_queue())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.event_queue=0x"+Long.toHexString(get_payload_event_queue())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.card_usage=0x"+Long.toHexString(get_payload_card_usage())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [payload.status=0x"+Long.toHexString(get_payload_status())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.seqNr
    //   Field type: int
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.seqNr' is signed (false).
     */
    public static boolean isSigned_header_seqNr() {
        return false;
    }

    /**
     * Return whether the field 'header.seqNr' is an array (false).
     */
    public static boolean isArray_header_seqNr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.seqNr'
     */
    public static int offset_header_seqNr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.seqNr'
     */
    public static int offsetBits_header_seqNr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'header.seqNr'
     */
    public int get_header_seqNr() {
        return (int)getUIntBEElement(offsetBits_header_seqNr(), 16);
    }

    /**
     * Set the value of the field 'header.seqNr'
     */
    public void set_header_seqNr(int value) {
        setUIntBEElement(offsetBits_header_seqNr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.seqNr'
     */
    public static int size_header_seqNr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.seqNr'
     */
    public static int sizeBits_header_seqNr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.originatorID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.originatorID' is signed (false).
     */
    public static boolean isSigned_header_originatorID() {
        return false;
    }

    /**
     * Return whether the field 'header.originatorID' is an array (false).
     */
    public static boolean isArray_header_originatorID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.originatorID'
     */
    public static int offset_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.originatorID'
     */
    public static int offsetBits_header_originatorID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.originatorID'
     */
    public int get_header_originatorID() {
        return (int)getUIntBEElement(offsetBits_header_originatorID(), 16);
    }

    /**
     * Set the value of the field 'header.originatorID'
     */
    public void set_header_originatorID(int value) {
        setUIntBEElement(offsetBits_header_originatorID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.originatorID'
     */
    public static int size_header_originatorID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.originatorID'
     */
    public static int sizeBits_header_originatorID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.low
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.low' is signed (false).
     */
    public static boolean isSigned_header_aTime_low() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.low' is an array (false).
     */
    public static boolean isArray_header_aTime_low() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.low'
     */
    public static int offset_header_aTime_low() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.low'
     */
    public static int offsetBits_header_aTime_low() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'header.aTime.low'
     */
    public int get_header_aTime_low() {
        return (int)getUIntBEElement(offsetBits_header_aTime_low(), 16);
    }

    /**
     * Set the value of the field 'header.aTime.low'
     */
    public void set_header_aTime_low(int value) {
        setUIntBEElement(offsetBits_header_aTime_low(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.low'
     */
    public static int size_header_aTime_low() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.low'
     */
    public static int sizeBits_header_aTime_low() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.aTime.high
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.aTime.high' is signed (false).
     */
    public static boolean isSigned_header_aTime_high() {
        return false;
    }

    /**
     * Return whether the field 'header.aTime.high' is an array (false).
     */
    public static boolean isArray_header_aTime_high() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.aTime.high'
     */
    public static int offset_header_aTime_high() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.aTime.high'
     */
    public static int offsetBits_header_aTime_high() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'header.aTime.high'
     */
    public short get_header_aTime_high() {
        return (short)getUIntBEElement(offsetBits_header_aTime_high(), 8);
    }

    /**
     * Set the value of the field 'header.aTime.high'
     */
    public void set_header_aTime_high(short value) {
        setUIntBEElement(offsetBits_header_aTime_high(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.aTime.high'
     */
    public static int size_header_aTime_high() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.aTime.high'
     */
    public static int sizeBits_header_aTime_high() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.acc_x
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.acc_x' is signed (false).
     */
    public static boolean isSigned_payload_acc_x() {
        return false;
    }

    /**
     * Return whether the field 'payload.acc_x' is an array (false).
     */
    public static boolean isArray_payload_acc_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.acc_x'
     */
    public static int offset_payload_acc_x() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.acc_x'
     */
    public static int offsetBits_payload_acc_x() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'payload.acc_x'
     */
    public int get_payload_acc_x() {
        return (int)getUIntBEElement(offsetBits_payload_acc_x(), 16);
    }

    /**
     * Set the value of the field 'payload.acc_x'
     */
    public void set_payload_acc_x(int value) {
        setUIntBEElement(offsetBits_payload_acc_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.acc_x'
     */
    public static int size_payload_acc_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.acc_x'
     */
    public static int sizeBits_payload_acc_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.acc_y
    //   Field type: int
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.acc_y' is signed (false).
     */
    public static boolean isSigned_payload_acc_y() {
        return false;
    }

    /**
     * Return whether the field 'payload.acc_y' is an array (false).
     */
    public static boolean isArray_payload_acc_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.acc_y'
     */
    public static int offset_payload_acc_y() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.acc_y'
     */
    public static int offsetBits_payload_acc_y() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'payload.acc_y'
     */
    public int get_payload_acc_y() {
        return (int)getUIntBEElement(offsetBits_payload_acc_y(), 16);
    }

    /**
     * Set the value of the field 'payload.acc_y'
     */
    public void set_payload_acc_y(int value) {
        setUIntBEElement(offsetBits_payload_acc_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.acc_y'
     */
    public static int size_payload_acc_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.acc_y'
     */
    public static int sizeBits_payload_acc_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.acc_z
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.acc_z' is signed (false).
     */
    public static boolean isSigned_payload_acc_z() {
        return false;
    }

    /**
     * Return whether the field 'payload.acc_z' is an array (false).
     */
    public static boolean isArray_payload_acc_z() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.acc_z'
     */
    public static int offset_payload_acc_z() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.acc_z'
     */
    public static int offsetBits_payload_acc_z() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'payload.acc_z'
     */
    public int get_payload_acc_z() {
        return (int)getUIntBEElement(offsetBits_payload_acc_z(), 16);
    }

    /**
     * Set the value of the field 'payload.acc_z'
     */
    public void set_payload_acc_z(int value) {
        setUIntBEElement(offsetBits_payload_acc_z(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.acc_z'
     */
    public static int size_payload_acc_z() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.acc_z'
     */
    public static int sizeBits_payload_acc_z() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mag_x
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mag_x' is signed (false).
     */
    public static boolean isSigned_payload_mag_x() {
        return false;
    }

    /**
     * Return whether the field 'payload.mag_x' is an array (false).
     */
    public static boolean isArray_payload_mag_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mag_x'
     */
    public static int offset_payload_mag_x() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mag_x'
     */
    public static int offsetBits_payload_mag_x() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'payload.mag_x'
     */
    public int get_payload_mag_x() {
        return (int)getUIntBEElement(offsetBits_payload_mag_x(), 16);
    }

    /**
     * Set the value of the field 'payload.mag_x'
     */
    public void set_payload_mag_x(int value) {
        setUIntBEElement(offsetBits_payload_mag_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mag_x'
     */
    public static int size_payload_mag_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.mag_x'
     */
    public static int sizeBits_payload_mag_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mag_y
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mag_y' is signed (false).
     */
    public static boolean isSigned_payload_mag_y() {
        return false;
    }

    /**
     * Return whether the field 'payload.mag_y' is an array (false).
     */
    public static boolean isArray_payload_mag_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mag_y'
     */
    public static int offset_payload_mag_y() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mag_y'
     */
    public static int offsetBits_payload_mag_y() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'payload.mag_y'
     */
    public int get_payload_mag_y() {
        return (int)getUIntBEElement(offsetBits_payload_mag_y(), 16);
    }

    /**
     * Set the value of the field 'payload.mag_y'
     */
    public void set_payload_mag_y(int value) {
        setUIntBEElement(offsetBits_payload_mag_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mag_y'
     */
    public static int size_payload_mag_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.mag_y'
     */
    public static int sizeBits_payload_mag_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.mag_z
    //   Field type: int
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.mag_z' is signed (false).
     */
    public static boolean isSigned_payload_mag_z() {
        return false;
    }

    /**
     * Return whether the field 'payload.mag_z' is an array (false).
     */
    public static boolean isArray_payload_mag_z() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.mag_z'
     */
    public static int offset_payload_mag_z() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.mag_z'
     */
    public static int offsetBits_payload_mag_z() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'payload.mag_z'
     */
    public int get_payload_mag_z() {
        return (int)getUIntBEElement(offsetBits_payload_mag_z(), 16);
    }

    /**
     * Set the value of the field 'payload.mag_z'
     */
    public void set_payload_mag_z(int value) {
        setUIntBEElement(offsetBits_payload_mag_z(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.mag_z'
     */
    public static int size_payload_mag_z() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.mag_z'
     */
    public static int sizeBits_payload_mag_z() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.wgps_status_queue
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.wgps_status_queue' is signed (false).
     */
    public static boolean isSigned_payload_wgps_status_queue() {
        return false;
    }

    /**
     * Return whether the field 'payload.wgps_status_queue' is an array (false).
     */
    public static boolean isArray_payload_wgps_status_queue() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.wgps_status_queue'
     */
    public static int offset_payload_wgps_status_queue() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.wgps_status_queue'
     */
    public static int offsetBits_payload_wgps_status_queue() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'payload.wgps_status_queue'
     */
    public int get_payload_wgps_status_queue() {
        return (int)getUIntBEElement(offsetBits_payload_wgps_status_queue(), 16);
    }

    /**
     * Set the value of the field 'payload.wgps_status_queue'
     */
    public void set_payload_wgps_status_queue(int value) {
        setUIntBEElement(offsetBits_payload_wgps_status_queue(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.wgps_status_queue'
     */
    public static int size_payload_wgps_status_queue() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.wgps_status_queue'
     */
    public static int sizeBits_payload_wgps_status_queue() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.app_health_queue
    //   Field type: int
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.app_health_queue' is signed (false).
     */
    public static boolean isSigned_payload_app_health_queue() {
        return false;
    }

    /**
     * Return whether the field 'payload.app_health_queue' is an array (false).
     */
    public static boolean isArray_payload_app_health_queue() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.app_health_queue'
     */
    public static int offset_payload_app_health_queue() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.app_health_queue'
     */
    public static int offsetBits_payload_app_health_queue() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'payload.app_health_queue'
     */
    public int get_payload_app_health_queue() {
        return (int)getUIntBEElement(offsetBits_payload_app_health_queue(), 16);
    }

    /**
     * Set the value of the field 'payload.app_health_queue'
     */
    public void set_payload_app_health_queue(int value) {
        setUIntBEElement(offsetBits_payload_app_health_queue(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.app_health_queue'
     */
    public static int size_payload_app_health_queue() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.app_health_queue'
     */
    public static int sizeBits_payload_app_health_queue() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.event_queue
    //   Field type: int
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.event_queue' is signed (false).
     */
    public static boolean isSigned_payload_event_queue() {
        return false;
    }

    /**
     * Return whether the field 'payload.event_queue' is an array (false).
     */
    public static boolean isArray_payload_event_queue() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.event_queue'
     */
    public static int offset_payload_event_queue() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.event_queue'
     */
    public static int offsetBits_payload_event_queue() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'payload.event_queue'
     */
    public int get_payload_event_queue() {
        return (int)getUIntBEElement(offsetBits_payload_event_queue(), 16);
    }

    /**
     * Set the value of the field 'payload.event_queue'
     */
    public void set_payload_event_queue(int value) {
        setUIntBEElement(offsetBits_payload_event_queue(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.event_queue'
     */
    public static int size_payload_event_queue() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.event_queue'
     */
    public static int sizeBits_payload_event_queue() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.card_usage
    //   Field type: long
    //   Offset (bits): 200
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.card_usage' is signed (false).
     */
    public static boolean isSigned_payload_card_usage() {
        return false;
    }

    /**
     * Return whether the field 'payload.card_usage' is an array (false).
     */
    public static boolean isArray_payload_card_usage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.card_usage'
     */
    public static int offset_payload_card_usage() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.card_usage'
     */
    public static int offsetBits_payload_card_usage() {
        return 200;
    }

    /**
     * Return the value (as a long) of the field 'payload.card_usage'
     */
    public long get_payload_card_usage() {
        return (long)getUIntBEElement(offsetBits_payload_card_usage(), 32);
    }

    /**
     * Set the value of the field 'payload.card_usage'
     */
    public void set_payload_card_usage(long value) {
        setUIntBEElement(offsetBits_payload_card_usage(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.card_usage'
     */
    public static int size_payload_card_usage() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.card_usage'
     */
    public static int sizeBits_payload_card_usage() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: payload.status
    //   Field type: short
    //   Offset (bits): 232
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'payload.status' is signed (false).
     */
    public static boolean isSigned_payload_status() {
        return false;
    }

    /**
     * Return whether the field 'payload.status' is an array (false).
     */
    public static boolean isArray_payload_status() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'payload.status'
     */
    public static int offset_payload_status() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'payload.status'
     */
    public static int offsetBits_payload_status() {
        return 232;
    }

    /**
     * Return the value (as a short) of the field 'payload.status'
     */
    public short get_payload_status() {
        return (short)getUIntBEElement(offsetBits_payload_status(), 8);
    }

    /**
     * Set the value of the field 'payload.status'
     */
    public void set_payload_status(short value) {
        setUIntBEElement(offsetBits_payload_status(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'payload.status'
     */
    public static int size_payload_status() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'payload.status'
     */
    public static int sizeBits_payload_status() {
        return 8;
    }

}
