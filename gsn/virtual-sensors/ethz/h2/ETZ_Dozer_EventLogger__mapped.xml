<virtual-sensor name="ETZ_Dozer_EventLogger__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="position_mapping" />
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                    // send email on dozer event error
                    def mailrecipients = ["permasense-test@tik.ee.ethz.ch"];
		    
                    if ( ! isdef('idToMessageMap')) {idToMessageMap = [
                    	5:'Node started after watchdog reset.',
                    	6:'DAQ lasted for too long, last data source was %s.',
                    	22:'Dozer: Watchdog triggered.',
                    	41:'Wxt520 init failed with code %s.',
                    	50:'Error while mounting SD card.',
                    	51:'Generic SD card error.',
                    	60:'EVENT_ERROR_RADIO_GENERIC (not used)',
                    	61:'SX1211: Radio pattern error %s.',
                    	82:'WGPS: Sam7 SD card full -> stopped logging to card.',
                    	84:'WGPS: Enter stop mode.',
                    	87:'WGPS: Sam7 setting custom configuration failed with error code %s.',
                    	90:'WGPS: Fatal GPS failure.',
                    	91:'WGPS: Fatal measurement failure.',
                    	92:'WGPS: Sam7 card init error with code %s.',
                    	97:'WGPS: Received command is erroneous (command: %s)',
                    	98:'WGPS: Modbus communication error (code: %s).',
                    	100:'WGPS: Time synchronization with Sam7 at start-up failed'];
                    }
                    
                    if (idToMessageMap.containsKey(EVENT_ID.toInteger())) {
                    	// Notify by email
						def emailTitle = "[PermaSense-GSN-Test] - DOZER ERROR [" + (new Date(GENERATION_TIME)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION;
						def emailContent = "DOZER ERROR [" + (new Date(GENERATION_TIME)).format('dd/MM/yyyy HH:mm:ss') + "]" + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION + " (device_id=" + DEVICE_ID + "):\n\n" + idToMessageMap.get(EVENT_ID.toInteger());
						if (EVENT_VALUE != null)
                    		emailContent = emailContent.replaceAll('%s',Integer.toString(EVENT_VALUE));
                    	
                    	sendEmail(mailrecipients, emailTitle, emailContent);
                    }
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
            <field name="SENSORTYPE" type="VARCHAR(100)" />
            <field name="SENSORTYPE_SERIALID" type="BIGINT" />
            <field name="HEADER_SEQNR" type="INTEGER" />
            <field name="HEADER_ORIGINATORID" type="INTEGER" />
            <field name="HEADER_ATIME" type="INTEGER" unit="s"/>
            <field name="EVENT_TIMESTAMP" type="BIGINT" unit="unixtime" index="true"/>
            <field name="EVENT_ID" type="SMALLINT" />
            <field name="EVENT_TYPE" type="INTEGER" />
            <field name="EVENT_VALUE" type="INTEGER" />
        </output-structure>
    </processing-class>
    <description>Dozer messages (DozerEventLoggerMsg) from ETZ deployment in usable form</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data0">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME0 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID0 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE0 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE0=0,NULL,PAYLOAD_EVENTLOG_VALUE0) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID0 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data1">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME1 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID1 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE1 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE1=0,NULL,PAYLOAD_EVENTLOG_VALUE1) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID1 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data2">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME2 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID2 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE2 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE2=0,NULL,PAYLOAD_EVENTLOG_VALUE2) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID2 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data3">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME3 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID3 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE3 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE3=0,NULL,PAYLOAD_EVENTLOG_VALUE3) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID3 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data4">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME4 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID4 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE4 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE4=0,NULL,PAYLOAD_EVENTLOG_VALUE4) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID4 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data5">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME5 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID5 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE5 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE5=0,NULL,PAYLOAD_EVENTLOG_VALUE5) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID5 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data6">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">
                        select * from ETZ_Dozer_EventLogger__muxed__mapped
                    </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, TIMESTAMP, GENERATION_TIME, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, 
                    (GENERATION_TIME - (PAYLOAD_EVENTLOG_TIME6 * 1000)) as EVENT_TIMESTAMP,
                    PAYLOAD_EVENTLOG_ID6 as EVENT_ID,
                    PAYLOAD_EVENTLOG_TYPE6 as EVENT_TYPE,
                    CASEWHEN(PAYLOAD_EVENTLOG_TYPE6=0,NULL,PAYLOAD_EVENTLOG_VALUE6) as EVENT_VALUE from wrapper where PAYLOAD_EVENTLOG_ID6 is not NULL 
                </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
