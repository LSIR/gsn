<virtual-sensor name="AdM_Dozer_PowerSwitch__config" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                	try {
						GENERATION_TIME = EVENT_TIMESTAMP;
                		
                		if ( ! isdef('deviceIdToValueMap')) { deviceIdToValueMap = [:]; }
                		if (!deviceIdToValueMap.containsKey(DEVICE_ID)) {
                			deviceIdToValueMap.put(DEVICE_ID, [null,null,null,null]);
                		}
                		def element = deviceIdToValueMap.get(DEVICE_ID);
                		
                		if (EVENT_ID == 4) {
							element[0] = element[1] = element[2] = element[3] = "disabled";
                		}
	                	else if (EVENT_ID == 32) {
							def PORT_MASK = 								0x003;
							def PORT1 =										0x001;
							def PORT2 =										0x002;
							def PORT1AND2 =									0x003;
							def POWER_ON_MASK =								0xF80;
							def POWER_ON_RIGHT_SHIFT =						7;
							def POWER_OFF_MASK =							0x07C;
							def POWER_OFF_RIGHT_SHIFT =						2;
	                		
	                		def powerOnTime = (EVENT_VALUE & POWER_ON_MASK) >> POWER_ON_RIGHT_SHIFT;
	                		def powerOffTime = (EVENT_VALUE & POWER_OFF_MASK) >> POWER_OFF_RIGHT_SHIFT;
    	            		
                			if (powerOnTime == 0 && powerOffTime == 0) {}
                			else if (powerOnTime == 0x1F && powerOffTime == 0x1F) {
								switch (EVENT_VALUE & PORT_MASK) {
									case PORT1:
										element[0] = element[1] = "disabled";
										break;
									case PORT2:
										element[2] = element[3] = "disabled";
										break;
									case PORT1AND2:
										element[0] = element[1] = element[2] = element[3] = "disabled";
										break;
								}
                			}
                			else {
                				def java.util.Date ontime = new java.util.Date(GENERATION_TIME + (powerOnTime * 3600000L));
                				def java.util.Date offtime = new java.util.Date(GENERATION_TIME + (powerOffTime * 3600000L));
								switch (EVENT_VALUE & PORT_MASK) {
									case PORT1:
										element[0] = ontime.format("HH:mmZ");
										element[1] = offtime.format("HH:mmZ");
										break;
									case PORT2:
										element[2] = ontime.format("HH:mmZ");
										element[3] = offtime.format("HH:mmZ");
										break;
									case PORT1AND2:
										element[2] = element[0] = ontime.format("HH:mmZ");
										element[3] = element[1] = offtime.format("HH:mmZ");
										break;
								}
							}
						}
						deviceIdToValueMap.put(DEVICE_ID, element);
						
                		SCHEDULE_POWER_ON_PORT1 = element[0];
                		SCHEDULE_POWER_OFF_PORT1 = element[1];
                		SCHEDULE_POWER_ON_PORT2 = element[2];
                		SCHEDULE_POWER_OFF_PORT2 = element[3];
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
            
            <field name="SCHEDULE_POWER_ON_PORT1" type="VARCHAR(12)" />
            <field name="SCHEDULE_POWER_OFF_PORT1" type="VARCHAR(12)" />
            <field name="SCHEDULE_POWER_ON_PORT2" type="VARCHAR(12)" />
            <field name="SCHEDULE_POWER_OFF_PORT2" type="VARCHAR(12)" />
        </output-structure>
    </processing-class>
    <description>PowerSwitch configuration at AdM deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query"> select * from AdM_Dozer_EventLogger__mapped where (EVENT_ID = 4 or (EVENT_ID = 32 and EVENT_VALUE > 3))</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper</query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
