<virtual-sensor name="Matterhorn_GPS_RAW__binary__mapped" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="position_mapping" />
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                	try {
                		if (GPS_UNIXTIME == 0) {
							def bbuffer = java.nio.ByteBuffer.wrap((byte[]) GPS_RAW_DATA);
							bbuffer.order(java.nio.ByteOrder.LITTLE_ENDIAN);
							// skip header and payload length
							bbuffer.position(bbuffer.position()+6);
                			GPS_UNIXTIME = (long)(gsn.utils.Helpers.convertGPSTimeToUnixTime((double)bbuffer.getInt()/1000.0, (short)bbuffer.getShort())*1000.0);
                		}
                		
                		// send email if number of satellites is zero LIMIT time in a row
                		def LIMIT = 10;
                    	def mailrecipients = ["permasense-admin@tik.ee.ethz.ch"];
                		if ( ! isdef('zeroCountMap')) { zeroCountMap = [:]; }
                		if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) {
                			if (zeroCountMap.containsKey(POSITION)) {
                				def zeroCount = 0;
                				if (GPS_SATS == 0) {
                					zeroCount = zeroCountMap.get(POSITION) + 1;
                					if (zeroCount == LIMIT) {
										// Notify by email
										def emailTitle = "[PermaSense-GSN-Public] - GPS ERROR [" + (new Date(GENERATION_TIME)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION;
										def emailContent = "BACKLOG ERROR [" + (new Date(GENERATION_TIME)).format('dd/MM/yyyy HH:mm:ss') + "]" + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION + " (device_id=" + DEVICE_ID + "):\n\nNumber of received satellites has been zero " + LIMIT + " time in a row.";
								
										sendEmail(mailrecipients, emailTitle, emailContent);
                					}
                				}
                				zeroCountMap.put(POSITION, zeroCount);
                			} else { zeroCountMap.put(POSITION, 0); }
                		}
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime" />
            <field name="GPS_UNIXTIME" type="BIGINT" unit="unixtime" index="true" />
            <field name="GSN_TIMESTAMP" type="BIGINT" unit="unixtime" />
            
			<field name="DEVICE_TYPE" type="VARCHAR(32)" />
            <field name="GPS_RAW_DATA_VERSION" type="SMALLINT"/>
		    <field name="GPS_SATS" type="INTEGER"/>
		    <field name="GPS_MISSING_SV" type="INTEGER"/>
            <field name="GPS_RAW_DATA" type="binary"/>
            
        </output-structure>
    </processing-class>
    <description>GPS RAW data in UBX binary format from Matterhorn deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data0">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="remote-rest">
                    <predicate key="query">select * from Matterhorn_GPS_RAW</predicate>
                    <predicate key="remote-contact-point">http://pvt.permasense.ethz.ch/streaming/</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed as GSN_TIMESTAMP, DEVICE_ID, GENERATION_TIME, TIMESTAMP, 0 as GPS_UNIXTIME, 0 as GPS_MISSING_SV, DEVICE_TYPE, GPS_RAW_DATA_VERSION, GPS_SATS, GPS_RAW_DATA from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data1">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from Matterhorn_GPS_Logger__data__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select GSN_TIMESTAMP, DEVICE_ID, GENERATION_TIME, TIMESTAMP, 0 as GPS_UNIXTIME, 0 as GPS_MISSING_SV, DEVICE_TYPE, GPS_RAW_DATA_VERSION, GPS_SATS, RAW_DATA as GPS_RAW_DATA from wrapper where data_type = 0</query>
            </source>
            <query> select * from source </query>
        </stream>
        <stream name="data2">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query">select * from Matterhorn_GPS_RAW__tobinary__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select *, timed as GSN_TIMESTAMP from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
