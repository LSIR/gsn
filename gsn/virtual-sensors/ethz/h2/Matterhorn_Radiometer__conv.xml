<virtual-sensor name="Matterhorn_Radiometer__conv" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                	try {
                		TEMPERATURE = null;
                		IRRADIANCE_SHORTWAVE_UP = IRRADIANCE_SHORTWAVE_DOWN = null;
                		IRRADIANCE_LONGWAVE_UP = IRRADIANCE_LONGWAVE_DOWN = null;
                		ALBEDO = null;
                		SKY_TEMPERATURE = GROUND_TEMPERATURE = null;
                		NET_RADIATION = NET_SOLAR_RADIATION = NET_FAR_INFRARED_RADIATION = null;
                    	
                    	if (TEMPERATURE_A0 != null) {
                    		def v_ain = ((double)TEMPERATURE_A0)*1.024*2.5/Math.pow(2,16);
                    		def v_27 = 2.5-v_ain;
                    		def r_t = v_ain*27000/v_27;
                    		def t_k = 1/(0.0010295+(0.0002391*Math.log(r_t)+0.0000001568*Math.pow(Math.log(r_t),3)));
                    		TEMPERATURE = t_k-273.15;
                    		
                    		if (SHORTWAVE_ADIFF01_1 != null )
                    			IRRADIANCE_SHORTWAVE_UP = ((((((double)SHORTWAVE_ADIFF01_1)/Math.pow(2,15))-1)*1.024*2.5/128)*Math.pow(10,6))/13.38;
                    		if (SHORTWAVE_ADIFF23_1 != null )
                    			IRRADIANCE_SHORTWAVE_DOWN = ((((((double)SHORTWAVE_ADIFF23_1)/Math.pow(2,15))-1)*1.024*2.5/128)*Math.pow(10,6))/12.76;
                    		
                    		if (LONGWAVE_ADIFF01_1 != null )
                    			IRRADIANCE_LONGWAVE_UP = (((((((double)LONGWAVE_ADIFF01_1)/Math.pow(2,15))-1)*1.024*2.5/128)*Math.pow(10,6))/13.12)+(0.0000000567*Math.pow(t_k,4));
                    		if (LONGWAVE_ADIFF23_1 != null )
                    			IRRADIANCE_LONGWAVE_DOWN = (((((((double)LONGWAVE_ADIFF23_1)/Math.pow(2,15))-1)*1.024*2.5/128)*Math.pow(10,6))/11.46)+(0.0000000567*Math.pow(t_k,4));
                    		
<!-- 							if (IRRADIANCE_SHORTWAVE_UP != null && IRRADIANCE_SHORTWAVE_DOWN != null) -->
<!-- 								ALBEDO = IRRADIANCE_SHORTWAVE_DOWN/IRRADIANCE_SHORTWAVE_UP; -->
								
<!-- 	                   		if (IRRADIANCE_LONGWAVE_UP != null) -->
<!-- 	                   			SKY_TEMPERATURE = Math.pow((IRRADIANCE_LONGWAVE_UP/0.0000000567),0.25); -->
<!-- 	                   		if (IRRADIANCE_LONGWAVE_DOWN != null) -->
<!-- 	                   			GROUND_TEMPERATURE = Math.pow(IRRADIANCE_LONGWAVE_DOWN/0.0000000567),0.25); -->

<!-- 							if (IRRADIANCE_SHORTWAVE_UP != null && IRRADIANCE_SHORTWAVE_DOWN != null) -->
<!-- 								NET_SOLAR_RADIATION = IRRADIANCE_SHORTWAVE_UP - IRRADIANCE_SHORTWAVE_DOWN; -->
<!-- 	                   		if (IRRADIANCE_LONGWAVE_UP != null && IRRADIANCE_LONGWAVE_DOWN) -->
<!-- 	                   			NET_FAR_INFRARED_RADIATION = IRRADIANCE_LONGWAVE_UP - IRRADIANCE_LONGWAVE_DOWN; -->

                    		if (IRRADIANCE_SHORTWAVE_UP != null && IRRADIANCE_SHORTWAVE_DOWN != null && IRRADIANCE_LONGWAVE_UP != null && IRRADIANCE_LONGWAVE_DOWN)
                    			NET_RADIATION = IRRADIANCE_SHORTWAVE_UP - IRRADIANCE_SHORTWAVE_DOWN + IRRADIANCE_LONGWAVE_UP - IRRADIANCE_LONGWAVE_DOWN;
                    	}
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
            
            <field name="SENSORTYPE" type="VARCHAR(100)" />
            <field name="SENSORTYPE_SERIALID" type="BIGINT" />
            <field name="HEADER_SEQNR" type="INTEGER" />
            <field name="HEADER_ORIGINATORID" type="INTEGER" />
            <field name="HEADER_ATIME" type="INTEGER" unit="s"/>
            <field name="PAYLOAD_SAMPLE_VALID" type="TINYINT" />
            <field name="PAYLOAD_SAMPLE_NO" type="SMALLINT" />
            <field name="TEMPERATURE" type="DOUBLE" unit="°C" />
            <field name="IRRADIANCE_SHORTWAVE_UP" type="DOUBLE" unit="W/m^2"/>
            <field name="IRRADIANCE_SHORTWAVE_DOWN" type="DOUBLE" unit="W/m^2" />
            <field name="IRRADIANCE_LONGWAVE_UP" type="DOUBLE" unit="W/m^2" />
            <field name="IRRADIANCE_LONGWAVE_DOWN" type="DOUBLE" unit="W/m^2" />
            <field name="ALBEDO" type="DOUBLE"/>
            <field name="SKY_TEMPERATURE" type="DOUBLE" unit="°C" />
            <field name="GROUND_TEMPERATURE" type="DOUBLE" unit="°C" />
            <field name="NET_SOLAR_RADIATION" type="DOUBLE" unit="W/m^2" />
            <field name="NET_FAR_INFRARED_RADIATION" type="DOUBLE" unit="W/m^2" />
            <field name="NET_RADIATION" type="DOUBLE" unit="W/m^2" />
        </output-structure>
    </processing-class>
    <description>Converted Radiometer messages from Matterhorn deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data0">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query"> select * from Matterhorn_Radiometer__merged</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper where position is not null </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
