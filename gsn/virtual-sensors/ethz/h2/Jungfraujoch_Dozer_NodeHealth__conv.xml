<virtual-sensor name="Jungfraujoch_Dozer_NodeHealth__conv" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="sensorvalue_conversion" />
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
					try {
						def LIMIT = 11.7;
						def SIZE = 60;
						def mailrecipients = ["permasense-admin@tik.ee.ethz.ch"];
						if ( ! isdef('voltageMap')) { voltageMap = [:]; }
						if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) {
							if (!voltageMap.containsKey(POSITION))
								voltageMap.put(POSITION, [0, 0, []]);
								
							if (voltageMap.get(POSITION)[0] <= GENERATION_TIME) {
								def ptr = voltageMap.get(POSITION)[1];
								def voltageList = voltageMap.get(POSITION)[2];
								
								if (voltageList.size() == SIZE ) {
									def averageBefore = voltageList.sum() / SIZE;
									voltageList[ptr] = SDIVOLTAGE.toDouble();
									
									if ((voltageList.sum() / SIZE) <= LIMIT && averageBefore > LIMIT) {
										// Notify by email
										def emailTitle = "[PermaSense-GSN-Public] - VOLTAGE WARNING [" + (new Date(GENERATION_TIME)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION + " - Battery voltage reaches critical state";
										def emailContent = "VOLTAGE WARNING - " + vsname.split("_",2)[0].toUpperCase() + " POS " + POSITION + " (device_id=" + DEVICE_ID + "):\n\n Battery voltage dropped below " + LIMIT + "V.";
										
										sendEmail(mailrecipients, emailTitle, emailContent);
									}
								}
								else { voltageList[ptr] = SDIVOLTAGE.toDouble(); }
								
								ptr = (ptr+1)%SIZE;
								voltageMap.put(POSITION, [GENERATION_TIME, ptr, voltageList]);
							}
						}
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
            <field name="SENSORTYPE" type="VARCHAR(100)" />
            <field name="SENSORTYPE_SERIALID" type="BIGINT" />
            <field name="HEADER_SEQNR" type="INTEGER" />
            <field name="HEADER_ORIGINATORID" type="INTEGER" />
            <field name="HEADER_ATIME" type="INTEGER" unit="s"/>
            <field name="PAYLOAD_SAMPLE_VALID" type="TINYINT" />
            <field name="PAYLOAD_SAMPLE_NO" type="SMALLINT" />
            <field name="PAYLOAD_UPTIME" type="INTEGER" unit="s"/>
            <field name="PAYLOAD_FLASHSTATUS" type="INTEGER" />
            <field name="PAYLOAD_QUEUESIZE" type="SMALLINT" />
            <field name="PAYLOAD_PARENTID" type="INTEGER" />
            <field name="PAYLOAD_HOPCOUNT" type="TINYINT" />
            <field name="PAYLOAD_CHILDCOUNT" type="TINYINT" />
            <field name="SYSVOLTAGE" type="VARCHAR(30)" unit="V"/>
            <field name="SDIVOLTAGE" type="VARCHAR(30)" unit="V"/>
            <field name="TEMPERATURE" type="VARCHAR(30)" unit="°C"/>
            <field name="HUMIDITY" type="VARCHAR(30)" unit="%"/>
            <field name="CURRENT" type="VARCHAR(30)" unit="mA"/>
            <field name="MSPTEMPERATURE" type="VARCHAR(30)" unit="°C"/>
        </output-structure>
    </processing-class>
    <description>Dozer messages (DozerNodeHealthMsg) from Jungfraujoch deployment converted</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query"> select * from Jungfraujoch_Dozer_NodeHealth__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select timed, POSITION, DEVICE_ID, GENERATION_TIME, TIMESTAMP, SENSORTYPE, SENSORTYPE_SERIALID, HEADER_SEQNR, HEADER_ORIGINATORID, HEADER_ATIME, PAYLOAD_SAMPLE_VALID, PAYLOAD_SAMPLE_NO, PAYLOAD_UPTIME, PAYLOAD_QUEUESIZE, PAYLOAD_CHILDCOUNT, PAYLOAD_FLASHSTATUS, PAYLOAD_PARENTID, PAYLOAD_HOPCOUNT,
                PAYLOAD_SYSVOLTAGE, PAYLOAD_SDIVOLTAGE, PAYLOAD_SIBCURRENT as PAYLOAD_CURRENT, PAYLOAD_MSPTEMPERATURE, PAYLOAD_TEMPERATURE,
                cast(round(CASEWHEN(locate(' sht21:', SENSORTYPE) != 0,
                  -6.0 + 125.0 * PAYLOAD_HUMIDITY / 4096,
                  ((0.01*PAYLOAD_TEMPERATURE)-64.63)*(0.01+(0.00008*PAYLOAD_HUMIDITY))+((0.0405*PAYLOAD_HUMIDITY)-4-(0.0000028*POWER(PAYLOAD_HUMIDITY,2))))
                  , 1) as CHAR(30)) as HUMIDITY from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
