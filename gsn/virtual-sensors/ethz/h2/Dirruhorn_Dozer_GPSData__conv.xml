<virtual-sensor name="Dirruhorn_Dozer_GPSData__conv" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
            <param name="persistant">true</param>
            <param name="scriptlet">
                <![CDATA[
                	try {
                		if (PAYLOAD_CARRIERPHASE_DOUBLE_0 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_1 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_2 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_3 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_4 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_5 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_6 != null &&
                			PAYLOAD_CARRIERPHASE_DOUBLE_7 != null)
                		{
                			CARRIERPHASE = Double.longBitsToDouble(
                				((long)( PAYLOAD_CARRIERPHASE_DOUBLE_0 & 0xff )) |
	                			(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_1 & 0xff )) << 8) |
    	            			(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_2 & 0xff )) << 16) |
        	        			(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_3 & 0xff )) << 24) |
            	    			(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_4 & 0xff )) << 32) |
                				(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_5 & 0xff )) << 40) |
                				(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_6 & 0xff )) << 48) |
                				(((long)( PAYLOAD_CARRIERPHASE_DOUBLE_7 & 0xff )) << 56));
                		}
                		else
                			CARRIERPHASE = null;
                			
                		if (PAYLOAD_PSEUDORANGE_DOUBLE_0 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_1 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_2 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_3 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_4 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_5 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_6 != null &&
                			PAYLOAD_PSEUDORANGE_DOUBLE_7 != null)
                		{
	                		PSEUDORANGE = Double.longBitsToDouble(
    	            			((long)( PAYLOAD_PSEUDORANGE_DOUBLE_0 & 0xff )) |
        	        			(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_1 & 0xff )) << 8) |
            	    			(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_2 & 0xff )) << 16) |
                				(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_3 & 0xff )) << 24) |
                				(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_4 & 0xff )) << 32) |
                				(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_5 & 0xff )) << 40) |
                				(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_6 & 0xff )) << 48) |
                				(((long)( PAYLOAD_PSEUDORANGE_DOUBLE_7 & 0xff )) << 56));
                		}
                		else
                			PSEUDORANGE = null;
                				
                		if (PAYLOAD_DOPPLER_SINGLE_0 != null &&
                			PAYLOAD_DOPPLER_SINGLE_1 != null &&
                			PAYLOAD_DOPPLER_SINGLE_2 != null &&
                			PAYLOAD_DOPPLER_SINGLE_3 != null)
                		{
	                		DOPPLER = (double) Float.intBitsToFloat(
    	            			((int)( PAYLOAD_DOPPLER_SINGLE_0 & 0xff )) |
        	        			(((int)( PAYLOAD_DOPPLER_SINGLE_1 & 0xff )) << 8) |
            	    			(((int)( PAYLOAD_DOPPLER_SINGLE_2 & 0xff )) << 16) |
                				(((int)( PAYLOAD_DOPPLER_SINGLE_3 & 0xff )) << 24));
                		}
                		else
                			DOPPLER = null;
				PAYLOAD_WEEKNUMBER = (short)PAYLOAD_WEEKNUMBER;
                                DEVICE_TYPE = "gps-tinynode";
				GPS_RAW_DATA_VERSION = (short)1; 
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
	    <field name="GSN_TIMESTAMP" type="BIGINT" unit="unixtime"/>
            <field name="DEVICE_TYPE" type="VARCHAR(32)" />
	    <field name="GPS_RAW_DATA_VERSION" type="SMALLINT"/> 
	    <field name="HEADER_SEQNR" type="INTEGER" />
            <field name="HEADER_ORIGINATORID" type="INTEGER" />
            <field name="HEADER_ATIME" type="INTEGER" unit="s"/>
	    <field name="PAYLOAD_TIMEOFWEEKMS" type="INTEGER" unit="ms"/>
	    <field name="PAYLOAD_WEEKNUMBER" type="SMALLINT"/>
      	    <field name="PAYLOAD_VEHICLENUM" type="SMALLINT"/>
	    <field name="PAYLOAD_MEASINDICATOR" type="TINYINT"/>
      	    <field name="PAYLOAD_SIGNALSTRENGTH" type="SMALLINT"/>
      	    <field name="PAYLOAD_LOSSLOCKINDICATOR" type="TINYINT"/>
      	    <field name="CARRIERPHASE" type="DOUBLE"/>
      	    <field name="PSEUDORANGE" type="DOUBLE"/>
	    <field name="DOPPLER" type="DOUBLE"/>
        </output-structure>
    </processing-class>
    <description>Converted Dozer messages (DozerGPSDataMsg) from Dirruhorn deployment</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
        <stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query"> select * from Dirruhorn_Dozer_GPSData__mapped </predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream>
    </streams>
</virtual-sensor>
