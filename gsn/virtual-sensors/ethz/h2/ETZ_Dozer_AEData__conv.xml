<virtual-sensor name="ETZ_Dozer_AEData__conv" priority="10" >
    <processing-class>
        <class-name>gsn.vsensor.BridgeVirtualSensorPermasense</class-name>
        <unique-timestamps>false</unique-timestamps>
        <init-params>
          <param name="persistant">true</param>
          <param name="scriptlet">
          <![CDATA[
            if (PAYLOAD_THRESHOLDCHANNEL != null) { CHANNEL = ((PAYLOAD_THRESHOLDCHANNEL % 2) + 1) as short };
            SERIAL = PAYLOAD_SERIAL;
            if (PAYLOAD_STARTSAMPLE != null) { STARTSAMPLE = 2 * PAYLOAD_STARTSAMPLE };
            if (PAYLOAD_LENGTH != null) { LENGTH = 2 * PAYLOAD_LENGTH };
            if (PAYLOAD_RISETIME != null) { RISETIME = 2 * PAYLOAD_RISETIME };
            if (PAYLOAD_AMPLITUDE != null) { 
              AMPLITUDE = (4.5 * PAYLOAD_AMPLITUDE / 65536.0) as float;
              AMPLITUDE_DB = (20 * Math.log(AMPLITUDE / 0.0001)/Math.log(10)) as float;
            }
            COUNT = PAYLOAD_COUNT;
            if (PAYLOAD_ENERGY != null) { ENERGY = (PAYLOAD_ENERGY * 20.25 / 8388608.0) as float };
            POSTTRIGGER = PAYLOAD_POSTTRIGGER;
            if (PAYLOAD_THRESHOLDCHANNEL != null) { THRESHOLD = Math.floor(PAYLOAD_THRESHOLDCHANNEL / 2) as short };
			
            if ( ! isdef('positionMap')) { positionMap = [:]; }
            if (POSITION != null && GENERATION_TIME > System.currentTimeMillis()-2592000000) { positionMap.put(POSITION, [System.currentTimeMillis(), DEVICE_ID]); }
          ]]>
          </param>
          <param name="period">600000</param>
          <param name="scriplet-periodic">
              <![CDATA[
              	try {
              		// default alarm time after which an email is sent if no messages have been received
                  	def timeDifferenceOffsetDefault = 86400000;
              		// a list of alarm time per position
                  	def timeDifferenceOffsetPositionMap = [:];
                  	// the mail recipients
                  	def mailrecipients = ["permasense-admin@tik.ee.ethz.ch"];
                  	
                  	if ( isdef('positionMap')) {
                  		def rmlist = [];
                  		for (entry in positionMap) {
                  			def now = System.currentTimeMillis();
                  	    	def timeDifference = now - entry.value[0];
                  	    	def timeDifferenceOffset = timeDifferenceOffsetDefault;
                  	    	if (timeDifferenceOffsetPositionMap.containsKey(entry.key)) {
                  	    		timeDifferenceOffset = timeDifferenceOffsetPositionMap.get(entry.key);
                  	    	}
                  	    	if (timeDifference > timeDifferenceOffset) {
                  	    		// Notify by email
                  	    		def emailTitle = "[PermaSense-GSN-Public] - OFFLINE WARNING [" + (new Date(now)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + entry.key;
                  	    		def emailContent = "OFFLINE WARNING [" + (new Date(now)).format('dd/MM/yyyy HH:mm:ss') + "] - " + vsname.split("_",2)[0].toUpperCase() + " POS " + entry.key + " (device_id=" + entry.value[1] + "):\n\n No " + vsname + " messages received in the last " + (timeDifference/60000.0) + " minutes.";
                      		 		sendEmail(mailrecipients, emailTitle, emailContent);
                      			rmlist.add(entry.key)
                      		}
                    	}
                      	positionMap.keySet().removeAll( rmlist as Set );
                  	}
					} catch(Throwable e) {
						org.apache.log4j.Logger.getLogger(gsn.processor.ScriptletProcessor.class).error(e);
					}
                ]]>
            </param>
        </init-params>
        <output-structure>
            <field name="POSITION" type="INTEGER" index="true" />
            <field name="DEVICE_ID" type="INTEGER" />
            <field name="GENERATION_TIME" type="BIGINT" unit="unixtime" index="true"/>
            <field name="TIMESTAMP" type="BIGINT" unit="unixtime"/>
            <field name="HEADER_SEQNR" type="INTEGER" />
            <field name="HEADER_ORIGINATORID" type="INTEGER" />
            <field name="HEADER_ATIME" type="INTEGER" unit="s"/>
            <field name="CHANNEL" type="SMALLINT" />
            <field name="SERIAL" type="BIGINT" />            
            <field name="STARTSAMPLE" type="BIGINT" unit="µs"/>
            <field name="LENGTH" type="INTEGER" unit="µs" />
            <field name="RISETIME" type="INTEGER" unit="µs"/>
            <field name="AMPLITUDE" type="DOUBLE" unit="V"/>
            <field name="AMPLITUDE_DB" type="DOUBLE" unit="dB"/>
            <field name="COUNT" type="INTEGER" />
            <field name="ENERGY" type="DOUBLE" unit="V²"/>
            <field name="POSTTRIGGER" type="INTEGER" />
            <field name="THRESHOLD" type="SMALLINT" unit="dB"/>
        </output-structure>
    </processing-class>
    <description>Dozer messages (DozerAEDataMsg) from ETZ deployment converted</description>
    <life-cycle pool-size="10" />
    <addressing />
    <storage />
    <streams>
    	<stream name="data">
            <source alias="source" storage-size="1" sampling-rate="1">
                <address wrapper="local">
                    <predicate key="query"> select * from ETZ_Dozer_AEData__mapped</predicate>
                    <predicate key="start-time">continue</predicate>
                </address>
                <query> select * from wrapper </query>
            </source>
            <query> select * from source </query>
        </stream> 
    </streams>
</virtual-sensor>
