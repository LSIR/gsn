
#deprecated: http://atom.research.microsoft.com/SenseWebV3/usermanager/service.asmx?WSDL //for login.
http://www.sensormap.org/SenseWebV3/usermanager/service.asmx?WSDL //for login.
- Have to provide client side implementation
- Code generated by the command: org.apache.axis2.wsdl.WSDL2Java -o generated -s -p gsn.msr.sensormap.userman -t -uri service.xml


#deprecated: http://atom.research.microsoft.com/SenseWebV3/sensormanager/service.asmx?WSDL //most of the actions, We implement this @ GSN for registeration/removal of v-sensors automatically.
http://www.sensormap.org/SenseWebV3/sensormanager/service.asmx?WSDL //most of the actions, We implement this @ GSN for registeration/removal of v-sensors automatically.
- Have to provide client and server side implementation.


Generating code for the data hub package.
#deprecated: http://atom.research.microsoft.com/SenseWebV3/DataHub/Service.asmx?WSDL
http://www.sensormap.org/SenseWebV3/DataHub/Service.asmx?WSDL

org.apache.axis2.wsdl.WSDL2Java -o generated -p gsn.msr.sensormap.datahub -s -ss -sd -uri service.xml

Accessing to the datahub on the localhost:
http://localhost:22001/services/Service?wsdl

Using the appropriate host/port for your web services:
> If you want to have your web service accessible through port 22001 (or any other port your gsn instance is running on) then you just
copy the "Service.auto.aar", rename it to "Service.aar" and put in the webapp/WEB-INF/services directory.
> If you have your gsn server proxied by some other program, then you need to give the host/port address of that program. For instance
if you are using gsn behind an apache server which runs on a separate port and ip, simply edit "META-INF\Service.wsdl" inside the 
"Service.manual.aar" file, and modify the " <wsdl:service name="Service"> " part of the file (should be close to the end of the file).


Note: To run org.apache.axis2.wsdl.WSDL2Java, add the project log4j configuration file as a JVM parameter (-Dlog4j.configuration=file:conf/log4j.properties)